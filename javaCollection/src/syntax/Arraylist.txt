===== java.util.ArrayList =====
- Object 배열을 이용해서 데이터를 순차적으로 저장하는 공간
- 첫번쨰 공간은 인덱스 0번을 갖는다(배열과 동일)
- 공간 확장 방식은 Vector 와 동일하다

=====Vector vs. ArrayList =====
- Vector 는 멀티스레드에 대한 동기화가 되어 있으나
- ArrayList는 동기화가 되어 있지 않다.

===== ArrayList 만의 특징 =====
비동기화된 컬렉션은 동기화된 컬렉션보다 더 나은 기능을 제공하며 스레드들이 컬렉션을 공유하지 않는
프로그램에서는 일반적으로 ArrayList 를 Vector보다 더 선호하며 ArrayLIst 는 동기화를 고려하지 않는 
Vector처럼 동기화 함으로써 스레드 동기화에 따르는 부담을 가지지 않기 떄문에 vector 보다 더 빠르게 실행된다.
더 프리하다고 볼수 있음

 ========= ArrayList와 배열(Array)의 차이 =====

[배열]
1. 선언 : 
	String[] arr = new Stirng[10]
2. 길이 : 
	arr.length
3. 추가 : 
	arr[i] = "샘플"
4. 삭제 : 
	arr[i] = null
5. 검색 : 
boolean flag = flase;
for(String str : arr){
	if("검색어".equals(str)){
	flag= true;
	break;
		}
	}




[ArrayLsit]
1. 선언 : 
	List<String> list = new ArrayList<String>();
2. 길이 : 
	list.size();
3. 추가 :
	list.add("샘플");
4. 삭제
: 	list.remove(1) // 인덱스
5. 찾기 
	list.contains("샘플")
	
	
코딩은 패턴이다.
데이터에 대한 핸들링은 결구 4가지로 압축되더라
CRUD
Create
Read : 검색(결과값 : 전부, 복수, 단수, 수량)
>Update
>Delete

객체지향언어 : 클래스간의 관계를 통해 입력값을 편집, 저장하여 사용자가 원하는 출력값을 반환하는 프로그램  언어
그 과정에서 특정 패턴을 이루는 코딩법이 정립
바둑학원 : 정석
피아노 : 바이엘
태권도 : 태극 1장 -
객체지향언어 : 23개의 디자인패턴
지금 : 컨트롤로 커맨드 패턴(command pattern)




 